{{ 'login-register.css' | asset_url | stylesheet_tag }}
{{ 'login-register.js' | asset_url | script_tag }}

<div class="row">
  <div class="small-12 columns">
    <div class="thb-form-container">
      <div class="thb-login-form cus-login" id="login">
        {% form 'customer_login', novalidate: 'novalidate' %}
          <div class="custom_login_container" style="display:block;">
            <div class="custom_login">
              <div class="customer--login">
                <h4>{{ 'customer.login_page.login' | t }}</h4>
                <p>
                  <strong>{{ 'customer.login_page.login_desc' | t }}</strong>
                </p>
                <p>{{ 'customer.login_page.login_description' | t }}</p>
                <div class="switch-login-section desk">
                  {{ 'customer.login_page.dont_have_an_account' | t }}
                  {% assign text_button_title = 'customer.login_page.create_account' | t %}
                  {% render 'text-button', url: routes.account_register_url, title: text_button_title %}
                  <div></div>
                </div>
              </div>
              {% if form.errors %}
                <div class="form-notification error">
                  {% render 'svg-icons' with 'thb-error' %}
                  {{ form.errors | default_errors }}
                </div>
              {% endif %}
              <div class="fields login--page">
                <div class="field">
                  <label for="number">{{ 'customer.login_page.Mobile' | t }}</label>
                  <div class="field--login--mobile">
                    <span>+971</span>
                   <input
                      type="tel"
                      placeholder="{{ 'customer.login_page.mobile'| t }}"
                      class="full numeric"
                      name="number"
                      id="mobile"
                      inputmode="numeric"
                      required
                      maxlength="10"
                      oninput="validateInput()"
                  >

                  </div>
                </div>
                <p>Will we SMS you a one-time password for verification.</p>
                <div class="field">
                  <button type="button" class="button full" id="registerButton" disabled>
                      <span>{{ 'customer.login_page.varify' | t }}</span>
                  </button>

                </div>
              </div>
              <div class="switch-login-section mob">
                {{ 'customer.login_page.dont_have_an_account' | t }}
                {% assign text_button_title = 'customer.login_page.create_account' | t %}
                {% render 'text-button', url: routes.account_register_url, title: text_button_title %}
                <div></div>
              </div>
            </div>
          </div>

          <!-- OTP start -->

          <div class="otp-container" style="display: none;">
            <div class="custom_login otp">
              <div class="customer--login">
                <h4>{{ 'customer.login_page.validate' | t }}</h4>
                <p>
                  <strong>{{ 'customer.login_page.validate_desc' | t }}</strong>
                </p>
                <div class="switch-login-section desk">
                  mob
                  {{ 'customer.login_page.validate_description' | t }}

                  {% assign text_button_title = 'customer.login_page.validate_description' | t %}
                  {% render 'text-button', url: routes.account_login_url, title: text_button_title %}
                  <div></div>
                </div>
              </div>
              {% if form.errors %}
                <div class="form-notification error">
                  {% render 'svg-icons' with 'thb-error' %}
                  {{ form.errors | default_errors }}
                </div>
              {% endif %}
              <div class="fields login--page">
                <div class="field-area">
                  <div id="otppopup1">
                    <div class="popup-wrapper">
                      <div class="popup-otp-wrapper">
                        <label for="OneTimePassword">One Time Password</label>
                        <div class="popup-otp-input-box">
                          <input
                            type="text"
                            name="OneTimePassword"
                            id="OneTimePassword1"
                            maxlength="1"
                            oninput="validateAndSwitch(this, 'OneTimePassword2')"
                            autocomplete="off"
                          >
                          <input
                            type="text"
                            name="OneTimePassword"
                            id="OneTimePassword2"
                            maxlength="1"
                            oninput="validateAndSwitch(this, 'OneTimePassword3')"
                            autocomplete="off"
                          >
                          <input
                            type="text"
                            name="OneTimePassword"
                            id="OneTimePassword3"
                            maxlength="1"
                            oninput="validateAndSwitch(this, 'OneTimePassword4')".
                            autocomplete="off"
                          >
                          <input
                            type="text"
                            name="OneTimePassword"
                            id="OneTimePassword4"
                            maxlength="1"
                            oninput="validateAndSwitch(this, 'OneTimePassword5')"
                            autocomplete="off"
                          >
                          <input
                            type="text"
                            name="OneTimePassword"
                            id="OneTimePassword5"
                            maxlength="1"
                            oninput="validateAndSwitch(this, null)"
                            autocomplete="off"
                          >
                        </div>
                        <p class="timing">Resend code</p>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="field">
                  <button class="button full" id="submitButton" disabled>
                    <span>{{ 'customer.login_page.title' | t }}</span>
                  </button>
                </div>
              </div>
              <div class="switch-login-section mob">
                {{ 'customer.login_page.dont_have_an_account' | t }}
                {% assign text_button_title = 'customer.login_page.create_account' | t %}
                {% render 'text-button', url: routes.account_register_url, title: text_button_title %}
                <div></div>
              </div>
            </div>
          </div>

          <!-- OTP End -->

          <div class="devider"><span>or</span></div>
          <div class="switch-login-section">
            {% assign text_button_title = 'Need Help?' %}
            {% render 'text-button', url: #, title: text_button_title %}
            Weâ€™re here to assist.
            <div></div>
          </div>
        {% endform %}
      </div>
    </div>
  </div>
</div>

<script>
  document.getElementById('registerButton').addEventListener('click', function() {
      var customLoginElement = document.querySelector('.otp-container');
      var customLoginotpElement = document.querySelector('.custom_login_container');
      if (customLoginElement.style.display === 'none' || customLoginElement.style.display === '') {
          customLoginElement.style.display = 'block';
          customLoginotpElement.style.display = 'none';
      } else {
          customLoginElement.style.display = 'none';
        customLoginotpElement.style.display = 'block';
      }

  });

const apiUrl = 'https://alainuat.gdadmin.org/laravel/public/api/sendOTP';

// Declare mobileInput outside the validateInput function
var mobileInput = document.getElementById('mobile');
var registerButton = document.getElementById('registerButton');

function validateInput() {
    // Remove non-numeric characters
    var numericValue = mobileInput.value.replace(/\D/g, '');

    // Update the input value with the numeric value
    mobileInput.value = numericValue;

    if (numericValue.length === 10) {
        registerButton.removeAttribute('disabled');
    } else {
        registerButton.setAttribute('disabled', 'disabled');
    }
}

registerButton.addEventListener('click', function () {
    // API call
    fetch(apiUrl, {
        method: 'POST',
        body: JSON.stringify({ mobile: mobileInput.value }),
    })
        .then(response => {
            if (!response.ok) {
                throw new Error(`Network response was not ok: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('MSS Test', data);
        })
        .catch(error => {
            console.error('Error fetching data:', error);
        });
});

</script>