 /*** city and dis Start ***/
  document.addEventListener("DOMContentLoaded", function() {
      getCityDistricts(0);
  });

  function getCityDistricts(id){

      const apiUrl = 'https://alainuat.gdadmin.org/laravel/public/api/getCityDistricts/'+id;
      
      // Use the fetch function to make a GET request to the API
      fetch(apiUrl, {
        method: 'GET',
       
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`Network response was not ok: ${response.status}`);
        }
        
        return response.json();
      })
      .then(data => {

        if(id == 0){
          let city = "<option>{{ 'customer.addresses.city_reg' | t }}</option>";
          data.response.forEach(function (item) {
            city += `<option value="${item.id}">${item.city_name}</option>`;
          });
          document.getElementById("regi_city").innerHTML = city;
        }else{
          let districts = "<option>{{ 'customer.addresses.district_reg' | t }}</option>";
          data.response.forEach(function (item) {
            districts += `<option value="${item.id}">${item.district_name}</option>`;
          });
          document.getElementById("district").innerHTML = districts;
        }
      })
      .catch(error => {
        // Handle errors that may occur during the fetch operation
       // console.error('Error fetching data:', error);
      });
  }
/*** city and dis end ***/


/*** Pop up start OTP ***/
function openOTPPopup() {
    startTimerOnClick();
    validation_form();
    var mobileInput = document.getElementById('mobile');
    var numericValue = mobileInput.value.replace(/\D/g, '');
    var resendLinkButton = document.getElementById('resendLink');

    // Check if the mobile number has 9 digits
    if (numericValue.length === 9) {
        const apiUrl = 'https://alainuat.gdadmin.org/laravel/public/api/sendOTP';

        // Function to send OTP
        function sendOTP() {
            fetch(apiUrl, {
                method: 'POST',
                body: JSON.stringify({ mobile: numericValue }),
                headers: {
                    'Content-Type': 'application/json'
                },
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Network response was not ok: ${response.status}`);
                }
                
                return response.json();
            })
            .then(data => {
                console.log('MSS Test', data);
            })
            .catch(error => {
                console.error('Error fetching data:', error);
            });
        }

        // Initial OTP sending
        sendOTP();

        // Continue with the popup logic
        var otpPopupHtml = document.getElementsByTagName('html')[0];
        var otpPopupElement = document.getElementById('otppopup');

        if (otpPopupElement) {
            // Set display property to 'block'
            otpPopupElement.style.display = 'block';

            // Add a class to the element
            otpPopupHtml.classList.add('popup-overlap');
        } else {
            console.error("Element with ID 'otppopup' not found");
        }

        // Resend link button event listener
        resendLinkButton.addEventListener('click', function () {
            // Resend OTP
            sendOTP();
        });

    } else {
        // Handle the case where the mobile number does not have 9 digits
        document.getElementById('mobileError').innerHTML = 'Mobile number must have 9 digits';
        console.error('Mobile number must have 9 digits');
    }
}


function closeOTPPopup() {
    var otpPopupHtml = document.getElementsByTagName( 'html' )[0];
    var otpPopupElement = document.getElementById('otppopup');

    if (otpPopupElement) {
        // Remove the class from the element
        otpPopupHtml.classList.remove('popup-overlap');

        // Set display property to 'none'
        otpPopupElement.style.display = 'none';
    } else {
        console.error("Element with ID 'otppopup' not found");
    }
}


 function saveOtpPopup(event) {
  // Add logic here to handle the data entered in the popup
  // For now, let's just close the popup without refreshing the page
  closeOtpPopup();

  // Prevent the default form submission behavior
  event.preventDefault();
}

function closeOtpPopup() {
  // Implement the logic to close your OTP popup here
  // This could involve hiding the popup or removing it from the DOM
  // For example:
  // document.getElementById("yourPopupId").style.display = "none";
}

function validateAndSwitch(input, nextFieldId) {
    // Remove non-numeric characters
    input.value = input.value.replace(/[^0-9a-zA-Z]/g, '');

    // Ensure only one character is entered
    if (input.value.length > 1) {
        input.value = input.value.charAt(0);
    }

    // Switch focus to the next input field
    if (input.value.length === 1 && nextFieldId) {
        document.getElementById(nextFieldId).focus();
    }

    // Check if all input fields are filled
    var allInputsFilled = Array.from(document.querySelectorAll('.your-input-class')).every(function (input) {
        return input.value.length === 1;
    });

    // Enable or disable the submit button based on the status of all input fields
    document.getElementById('verifyOtpbtn').disabled = !allInputsFilled;
}

  
/*** Pop up End OTP ***/

/*** Pop up start MAP ***/

   var map;

    // Function to initialize the map
    function initMap() {
      // Create a new map instance and set its properties
      map = new google.maps.Map(document.getElementById('map'), {
        center: { lat: 0, lng: 0 }, // Set the initial map center
        zoom: 10, // Set the initial zoom level
      });

      // Add a click event listener to the map to capture the selected location
      google.maps.event.addListener(map, 'click', function(event) {
        updateLocation(event.latLng);
      });

      // Add a dragend event listener to the map to capture the dragged location
      google.maps.event.addListener(map, 'dragend', function() {
        updateLocation(map.getCenter());
      });
    }

    // Function to open the popup
   function openPopup() {
    var otpPopupHtml = document.getElementsByTagName( 'html' )[0];
    var popupElement = document.getElementById('popup');

    if (popupElement) {
        // Set display property to 'block'
        popupElement.style.display = 'block';

        // Add a class to the element
        otpPopupHtml.classList.add('popup-overlap');

        // Check if initMap function is defined before calling
        if (typeof initMap === 'function') {
            // Initialize the map when the popup is opened
            initMap();
        } else {
            console.error("initMap function is not defined");
        }
    } else {
        console.error("Element with ID 'popup' not found");
    }
}
    // Function to close the popup
  
    function closePopup() {
    var otpPopupHtml = document.getElementsByTagName( 'html' )[0];
    var popupElement = document.getElementById('popup');

    if (popupElement) {
        // Remove the class from the element
        otpPopupHtml.classList.remove('popup-overlap');

        // Set display property to 'none'
        popupElement.style.display = 'none';
    } else {
        console.error("Element with ID 'popup' not found");
    }
}

    // Function to update the location information
    function updateLocation(location) {
      // Update the input field with the selected location
      let apiAdd = `https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyAEbeab1tjvjCM0g95bVgRTI1iR5yPln1Q&latlng=${location.lat()},${location.lng()}`
    /** get address form lag and lng **/ 
    fetch(apiAdd)
      .then(response => {
          if (!response.ok) {
              throw new Error(`HTTP error! Status: ${response.status}`);
          }
          return response.json();
      })
      .then(data => {
          document.getElementById('locationText').innderText = data.results[0]['formatted_address'];
          document.getElementById('locationInput').value = data.results[0]['formatted_address'];
      })
      .catch(error => {
        console.error('Error fetching data:', error);
      });
      }
      /** END  get address form lag and lng **/ 
    // Function to handle Enter key on the address input field
    function handleEnterKey(event) {
      if (event.key === 'Enter') {
        // Prevent the default Enter key behavior (form submission)
        event.preventDefault();

        // Update location based on entered address
        updateLocationForAddress();
      }
    }

    // Function to update the location based on entered address
    function updateLocationForAddress() {
      var address = document.getElementById('addressInput').value;

      // Use Google Maps Geocoding API to convert the address into latitude and longitude
      var geocoder = new google.maps.Geocoder();
      geocoder.geocode({ 'address': address }, function(results, status) {
        if (status == 'OK' && results[0]) {
          var location = results[0].geometry.location;

          // Update the map center
          map.setCenter(location);

          // Update the location information
          updateLocation(location);
        }
      });
    }

    // Function to show map based on entered address
    function showMapForAddress() {
      updateLocationForAddress();
    }
  
/*** Pop up end MAP ***/  

/*** Reg mobile field start ***/
  function validateInputt() {
    
      var mobileInput = document.getElementById('mobile');
      var registerButton = document.getElementById('registerButton');

      // Remove non-numeric characters
      var numericValue = mobileInput.value.replace(/\D/g, '');

      // Update the input value with the numeric value
      mobileInput.value = numericValue;
  }
/*** Reg mobile field end ***/

/*** Timer start ***/

       let timer; // Declare timer as a global variable

    // Function to start the countdown timer
    function startTimer(duration, display) {
        let timeLeft = duration;
        timer = setInterval(function () {
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;

            const formattedTime = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
            display.textContent = formattedTime;

            if (--timeLeft < 0) {
                clearInterval(timer);
                // Enable the link and reset onclick when the timer finishes
                const resendLink = document.getElementById('resendLink');
                resendLink.classList.remove('disabled-link');
                resendLink.setAttribute('onclick', 'startTimerOnClick()'); // Restore onclick
                display.style.display = 'none';
            }else{
              display.style.display = 'block';
            }
        }, 1000);
    }

    // Function to start the timer when the button is clicked
    function startTimerOnClick() {       
        // Disable the link to prevent multiple clicks
        const resendLink = document.getElementById('resendLink');
        resendLink.classList.add('disabled-link');
        resendLink.removeAttribute('onclick'); // Remove onclick to disable further clicks

        // Get the timer element
        const timerElement = document.getElementById('timer');

        // Set the duration of the timer in seconds (in this case, 60 seconds)
        const timerDuration = 60;

        // Start or restart the timer
        startTimer(timerDuration, timerElement);  
    }
    
/*** Timer end ***/

/*** login page and otp start ***/
 function captured_value() {
     // Get the input value
        var inputValue = document.getElementById('mobile').value;

        // Display the captured value in the div
        document.getElementById('capturedValue').innerText = '+971 ' + inputValue;
        document.getElementById('capturedValuemob').innerText = '+971 ' + inputValue;
 }

 function startTimerOnClick_login() {
   startTimerOnClick();
   captured_value();
 }
/*** login page and otp end ***/

/*** validation form reg page start ***/

function validation_form(){
 // var first_nameInput = document.getElementById('first_name');
 // var last_nameInput = document.getElementById('last_name');
 // var emailInput = document.getElementById('email');
 // var confirm_emailInput = document.getElementById('confirm_email');
 // var locationInputInput = document.getElementById('locationInput');
 // var regi_cityInput = document.getElementById('regi_city');
 // var districtInput = document.getElementById('district');

  // if(!first_nameInput.value){
  //     alert('fill first name');
  //   }else if(!last_nameInput.value){
  //   alert('fill last name');
  //   }
  
 // if(first_nameInput.value && last_nameInput.value && emailInput.value && confirm_emailInput.value && locationInputInput.value && regi_cityInput.value && districtInput.value ){  
 // }else{
    
 //    alert('fill');
 // }
}
 
 /*** validation form reg page end ***/