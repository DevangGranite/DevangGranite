//** URL param object */
const urlParams = new URLSearchParams(window.location.search);

/** store cooket */
function setCookie(name,value,days) {
    var expires = "";
    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days*24*60*60*1000));
        expires = "; expires=" + date.toUTCString();
    }
    document.cookie = name + "=" + (value || "")  + expires + "; path=/";
}

/** get cooket value by cookie name*/
function getCookie(name) {
    var nameEQ = name + "=";
    var ca = document.cookie.split(';');
    for(var i=0;i < ca.length;i++) {
        var c = ca[i];
        while (c.charAt(0)==' ') c = c.substring(1,c.length);
        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
    }
    return null;
}

/** delete/erase cooket by cookie name*/
 function eraseCookie(name) {   
    document.cookie = name +'=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
}

/** get customer reward data **/
async function getCustomerReward(){
    return fetch(`https://alainappuat.gdadmin.org/shopifyApiV2/getCTDCustomer/${document.querySelector('[name="meta[user_id]"]').value}`, {
        method: 'GET',
        headers:{
            'lancode':'en',
            'token':'123456'
        },
    }).then(response => {
        if (!response.ok) {
            throw new Error(`Network response was not ok: ${response.status}`);
        }
        return response.json();  
    }).then(data => {
        console.log('Customer Reward',data);
        return data.response;
    }).catch(error => {
        console.error('Error fetching data:', error);
    });
    
}

async function getCustomerRewardOfferes(){
    return fetch(`https://alainappuat.gdadmin.org/shopifyApiV2/getCTDCustomerRewards/${document.querySelector('[name="meta[user_id]"]').value}/0/100`, {
        method: 'GET',
        headers:{
            'lancode':'en',
            'token':'123456'
        },
    }).then(response => {
        if (!response.ok) {
            throw new Error(`Network response was not ok: ${response.status}`);
        }
        return response.json();  
    }).then(data => {
        console.log('Customer Reward Offer',data);
        return data.response;
    }).catch(error => {
        console.error('Reward Offer Error fetching data:', error);
    });
}

async function rewardOfferDetail(reward_id){
    return fetch(`https://alainappuat.gdadmin.org/shopifyApiV2/getCTDRewardDetails/${document.querySelector('[name="meta[user_id]"]').value}/${reward_id}`, {
        method: 'GET',
        headers:{
            'lancode':'en',
            'token':'123456'
        },
    }).then(response => {
        if (!response.ok) {
            throw new Error(`Network response was not ok: ${response.status}`);
        }
        return response.json();  
    }).then(data => {
        console.log('Customer Reward Offer detail',data);
        return data.response;
    }).catch(error => {
        console.error('Reward Offer Error fetching data:', error);
    });
}

class AccountMyReward  extends HTMLElement{
    constructor() {
        super();
        this.user_id = document.querySelector('[name="meta[user_id]"]');
        this.user_name = document.querySelector('[name="meta[name]"]');
        this.token = document.querySelector('[name="meta[token]"]');
        this.currentTierImage = "{{ 'Blue_Tier.png' | file_url }}";
        this.next_tier = "{{ 'customer.account.reward.green_tier' | t}}";
        this.rewardProgressCompleteBar = this.querySelector('.customer-rewards-progress--complete');
        this.rewardProgressDrop = this.querySelector('.customer-rewards-progress--drop');
        this.rewardPriceWrapper = this.querySelector('.customer-rewards-price--wrapper');
        this.rewardPriceTimer = this.querySelector('.customer-rewards-drops--timer');
        this.inital();
    }
    async inital() {
        this.data = await getCustomerReward();
        if(this.data.current_points >= 80)
            this.rewardProgressCompleteBar.style.width = `100%`;
        else
            this.rewardProgressCompleteBar.style.width = `${this.data.current_points*100/80}%`;

        this.rewardProgressCompleteBar.style.background = `linear-gradient(90deg, #2866D3 61.5%, #409D25 100.07%)`;
        if(this.data.current_points > 30 && this.data.current_points <= 80){
            this.currentTierImage = "{{ 'Green_Tier.png' | file_url }}";
            this.next_tier = "{{ 'customer.account.reward.platinum_tier' | t}}";
            this.rewardProgressDrop.src = "{{ 'account-platinum-drop.png' | file_url }}";
            this.rewardProgressCompleteBar.style.background = `linear-gradient(90deg, #409D25 61.5%, #94979b 100.07%)`;
        }else if(this.data.current_points > 80){
            this.currentTierImage = "{{ 'Platinum_Tier.png' | file_url }}";
            this.rewardProgressCompleteBar.style.background = `linear-gradient(90deg, #53565a 61.5%, #94979b 100.07%)`;
        }

        this.rewardPriceWrapper.innerHTML = `
            <span>${this.data.tier}</span>
            <div class="customer-rewards-balance--wrapper">
                <img src=${this.currentTierImage} alt="Drop" width="32">
                <span class="customer-rewards--balance">${this.data.current_points}</span>
            </div>`;

            this.rewardPriceTimer.innerHTML = (this.data.current_points > 80) ? "{{ 'customer.account.reward.reach_top_tier' | t }}" : `<span>${this.data.points_until_next_tier} {{ 'customer.account.reward.until_next_tier' | t}}</span><span class="customer-rewards-drops--tier">${this.next_tier}</span>`;

    }

}
customElements.define('account-my-reward', AccountMyReward);

class ClipTheDeal  extends HTMLElement{
    constructor() {
        super();
        this.currentTierTitle = "{{ 'customer.account.reward.blue_tier' | t }}";
        this.nextTierTitle = "{{ 'customer.account.reward.green_tier' | t}}";
        this.pageHeader = this.querySelector('.clip_the_deal_inner');
        this.rewardProgressCompleteBarDesktop = this.querySelector('.clip_the_deal_data_drops_range.desktop');
        this.rewardProgressCompleteBarMobile = this.querySelector('.clip_the_deal_data_drops_range.mobile');
        this.rewardProgressDrop = this.querySelector('.range_icon_move');
        this.rewardDropPageTier = this.querySelector('.clip_the_deal_inner_bottom');
        this.currentDrop = this.querySelector('.clip_the_deal_inner_data_points_count');
        this.expireDrop = this.querySelector('.drop_expire');
        this.rewardPriceTimer = this.querySelector('.clip_the_deal_data_range_title');
        this.memberDate = this.querySelector('.date_bottom_cards');
        this.data;
        this.inital();
        this.rewardOffers();
    }
    async inital(){
        this.data = await getCustomerReward(4);
        this.expireDate = new Date(this.data.next_date_points_expiring);
        this.rewardDropPageTier.innerText = `${this.data.tier} {{ 'customer.account.reward.tier' | t }}`;

        if(this.data.current_points >= 80)
        this.rewardProgressCompleteBarMobile.style.width = this.rewardProgressCompleteBarDesktop.style.width = `100%`;
        else
            this.rewardProgressCompleteBarMobile.style.width = this.rewardProgressCompleteBarDesktop.style.width = `${this.data.current_points*100/80}%`;

        if(this.data.current_points < 30){
            this.currentDrop.innerHTML = `<img src="{{ 'Blue_Tier.png' | file_url }}" alt="Drop" width="36"><span>${this.data.current_points}</span>`;
            this.rewardProgressCompleteBarMobile.style.background = this.rewardProgressCompleteBarDesktop.style.background = `linear-gradient(90deg, #2866D3 61.5%, #409D25 100.07%)`;
            
        }else if(this.data.current_points > 30 && this.data.current_points <= 80) {
            this.nextTierTitle = "{{ 'customer.account.reward.platinum_tier' | t }}";
            this.currentDrop.innerHTML = `<img src="{{ 'Green_Tier.png' | file_url }}" alt="Drop" width="36"><span>${this.data.current_points}</span>`;
            this.rewardProgressCompleteBarMobile.style.background = this.rewardProgressCompleteBarDesktop.style.background = `linear-gradient(90deg, #409D25 61.5%, #94979b 100.07%)`;
            this.rewardProgressDrop.querySelector('img').src = "{{ 'Platinum.svg' | file_url }}";
            this.pageHeader.style.background = `radial-gradient(circle, #00B140 0%, #007C2D 100%)`;
            this.querySelector('.clip_the_deal_data_title_main').style.color = this.querySelector('.clip_the_deal_inner_data_points_count').style.color = "#007c2d";
        }else{
            this.currentDrop.innerHTML = `<img src="{{ 'Platinum_Tier.png' | file_url }}" alt="Drop" width="36"><span>${this.data.current_points}</span>`;
            this.rewardProgressCompleteBarMobile.style.background = this.rewardProgressCompleteBarDesktop.style.background = `linear-gradient(90deg, #53565a 61.5%, #94979b 100.07%)`;
            this.rewardProgressDrop.querySelector('img').src = "{{ 'Platinum.svg' | file_url }}";
            this.pageHeader.style.background = `radial-gradient(circle, #8A8F95 0%, #6B6E71 100%)`;
            this.querySelector('.clip_the_deal_data_title_main').style.color = this.querySelector('.clip_the_deal_inner_data_points_count').style.color = "#6b6e71";
        }

        if(this.data.points_expiring != null)
            this.expireDrop.innerHTML = `<strong>${this.data.points_expiring} {{ 'customer.account.reward.drop' | t }}</strong> 
            {{ 'customer.account.reward.expire_label' | t }} ${this.expireDate.getDate()}/${this.expireDate.getMonth() + 1}/${this.expireDate.getFullYear()}`;

        this.rewardPriceTimer.innerHTML = (this.data.current_points > 80) ? "{{ 'customer.account.reward.reach_top_tier' | t }}" : `${this.data.points_until_next_tier} {{ 'customer.account.reward.until_next_tier' | t}}<span class="clip_the_deal_data_range_title_tier"> ${this.nextTierTitle}</span>`;

        let memberDate = new Date(this.data.customer_sinced);
        this.memberDate.innerText = `{{ 'customer.account.reward.member_since' | t }} ${memberDate.getDate()} ${memberDate.toLocaleString('default', { month: 'long' })} ${memberDate.getFullYear()}`;
    }
    async rewardOffers() {
        this.offers = await getCustomerRewardOfferes();
        this.blueTierOffer = this.querySelector('.card_redeme_main_blue_card_offer');
        this.greenTierOffer = this.querySelector('.card_redeme_main_green_card_offer');
        this.platinumTierOffer = this.querySelector('.card_redeme_main_platinum_card_offer');
        this.offerBlue = this.offerGreen = this.offerPlatinum = '';

        this.offers.forEach(offer => {

            if(offer.tiers.toLowerCase() == "blue"){

                if(this.data.current_points < offer.points){
                    this.isDropIcon = "{{ 'lock_offer.svg' | file_url }}";
                    this.offerInactiveClass = "inactive";
                }else{
                    this.isDropIcon = "{{ 'Blue.svg' | file_url }}";
                    this.offerInactiveClass = "";
                    this.offerBlue += `<a href="/account?view=rewards-redeem-voucher&reward=${offer.id}" class="cards_redeme_inner_width">`;
                }

                this.offerBlue += `
                        <div class="cards_redeme_inner ${this.offerInactiveClass} ${(this.offerInactiveClass != "") ? 'cards_redeme_inner_width' : '' }">
                            <div class="cards_redeme_inner_image">
                                <img src="${offer.image}" width="112" height="104" alt="${offer.name}">
                            </div>
                            <div class="cards_redeme_inner_text_points">
                                <div class="cards_title">${offer.name}</div>
                                <div class="cards_points">
                                    <img src="${this.isDropIcon}" alt="Drop" width="24">${offer.points} {{ 'customer.account.reward.drop' | t }}
                                </div>
                            </div>
                        </div>`;
                
                if(this.data.current_points > offer.points)
                    this.offerBlue += `</a>`;
            }

            if(offer.tiers.toLowerCase() == "green"){
                if(this.data.current_points < offer.points){
                    this.isDropIcon = "{{ 'lock_offer.svg' | file_url }}";
                    this.offerInactiveClass = "inactive";
                }else{
                    this.isDropIcon = "{{ 'Green.svg' | file_url }}";
                    this.offerInactiveClass = "";
                    this.offerGreen += `<a href="/account?view=rewards-redeem-voucher&reward=${offer.id}" class="cards_redeme_inner_width">`;
                }
                this.offerGreen += `<div class="cards_redeme_inner green_offer_card ${this.offerInactiveClass} ${(this.offerInactiveClass != "") ? 'cards_redeme_inner_width' : '' }">
                            <div class="cards_redeme_inner_image">
                                <img src="${offer.image}" width="112" height="104" alt="${offer.name}">
                            </div>
                            <div class="cards_redeme_inner_text_points">
                                <div class="cards_title">${offer.name}</div>
                                <div class="cards_points">
                                    <img src="${this.isDropIcon}" alt="Drop" width="24">${offer.points} {{ 'customer.account.reward.drop' | t }}
                                </div>
                            </div>
                        </div>`;
                
                if(this.data.current_points > offer.points)
                    this.offerGreen += `</a>`;
            }

            if(offer.tiers.toLowerCase() == "platinum"){
                if(this.data.current_points < offer.points){
                    this.isDropIcon = "{{ 'lock_offer.svg' | file_url }}";
                    this.offerInactiveClass = "inactive";
                }else{
                    this.isDropIcon = "{{ 'Platinum.svg' | file_url }}";
                    this.offerInactiveClass += "";
                    this.offerPlatinum += `<a href="/account?view=rewards-redeem-voucher&reward=${offer.id}" class="cards_redeme_inner_width">`;
                }

                this.offerPlatinum += `<div class="cards_redeme_inner platinum_offer_card ${this.offerInactiveClass} ${(this.offerInactiveClass != "") ? 'cards_redeme_inner_width' : ''}">
                            <div class="cards_redeme_inner_image">
                                <img src="${offer.image}" width="112" height="104" alt="${offer.name}">
                            </div>
                            <div class="cards_redeme_inner_text_points">
                                <div class="cards_title">${offer.name}</div>
                                <div class="cards_points">
                                    <img src="${this.isDropIcon}" alt="Drop" width="24">${offer.points} {{ 'customer.account.reward.drop' | t }}
                                </div>
                            </div>
                        </div>`;

                this.offerPlatinum += `</a>`;
            }
            
        });
        if(this.offerBlue != ''){
            this.blueTierOffer.querySelector('.blue_tier_offer').innerHTML = this.offerBlue;
            this.blueTierOffer.style.display = 'block';
        }
        if(this.offerGreen != ''){
            this.greenTierOffer.querySelector('.green_tier_offer').innerHTML = this.offerGreen;
            this.greenTierOffer.style.display = 'block';
        }
        if(this.offerPlatinum != ''){
            this.platinumTierOffer.querySelector('.platinum_tier_offer').innerHTML = this.offerPlatinum;
            this.platinumTierOffer.style.display = 'block';
        }

        if(this.data.current_points <= 30){
            this.greenTierOffer.querySelector('.lock_cart_block').innerHTML = this.platinumTierOffer.querySelector('.lock_cart_block').innerHTML = '<img src={{ "lock.svg" | file_url }} >';
        }else if(this.data.current_points > 30 && this.data.current_points <= 80){
            this.platinumTierOffer.querySelector('.lock_cart_block').innerHTML = '<img src={{ "lock.svg" | file_url }} >';
        }
    }
}
customElements.define('clip-the-deal', ClipTheDeal);

class RewardOfferDetail extends HTMLElement{
    constructor() {
        super();
        this.pageHeader = this.querySelector('.reward-redeem-voucher_inner');
        this.voucherImage = this.querySelector('.reward-redeem-voucher_image');
        this.voucherDetail = this.querySelector('div.reward-redeem-voucher_detail');
        this.termsCondition = this.querySelector('.reward-redeem-voucher-list');
        this.similarWrapper = this.querySelector('.similar_deal_wrapper');
        this.redeemBtn = this.querySelector('.reward-redeem-voucher_redeme_btn_atc');

        this.inital();
    }
    async inital() {

        this.offerDetail = await rewardOfferDetail(urlParams.get('reward')).then(offerDetail => {

            // set image
            this.voucherImage.src = offerDetail.image;
            this.voucherImage.alt = offerDetail.name;

            // set voucher detail
            if(offerDetail.tier.toLowerCase() == 'blue'){
                this.dropIcon = "{{ 'Blue_Tier.png' | file_url }}";
            }
            else if(offerDetail.tier.toLowerCase() == 'green'){
                this.dropIcon = "{{ 'Green_Tier.png' | file_url }}";
                this.pageHeader.style.background = `radial-gradient(circle, #00B140 0%, #007C2D 100%)`;
            }
            else{
                this.dropIcon = "{{ 'Platinum_Tier.png' | file_url }}";
                this.pageHeader.style.background = `radial-gradient(circle, #8A8F95 0%, #6B6E71 100%)`;
            }

            this.voucherDetail.innerHTML = `${offerDetail.description} <span class="count_drops_total"><img src="${this.dropIcon}" width="15">${offerDetail.points}</span>`

            this.redeemBtn.href = `/account?view=rewards-voucher-redeemed&reward=${urlParams.get('reward')}`;

            // terms and condition
            this.termsConditionData = "";
            offerDetail.terms_conditions.forEach(item => {
                this.termsConditionData += `<li>${item}</li>`;
            });
            this.termsCondition.querySelector('ul').innerHTML = this.termsConditionData;

            // similar deals
            this.similarDeals = '';
            if(offerDetail.similar.length > 0){
                offerDetail.similar.forEach(item => {
                    // if(offerDetail.points == item.points){
                        this.similarDeals += `<div class="voucher_cards_blocks">
                                <div class="voucher_cards_image"><img src="${item.image}"></div>
                                <div class="voucher_cards_info">
                                <p class="voucher_cards_title">${item.name}</p>
                                <p class="voucher_cards_drops"><img src="${this.dropIcon}" width="9"> ${item.points} {{ 'customer.account.reward.drop' | t }}</p>
                                </div>
                                <a class="voucher_card_link" href="/account?view=rewards-redeem-voucher&reward=${item.id}"></a>
                            </div>`;
                    // }
                });
                this.similarWrapper.querySelector('.voucher_cards_blocks_inner_main').innerHTML = this.similarDeals;
                this.similarWrapper.style.display = 'block';
            }

            this.querySelector('.reward-redeem-voucher_data_main.reward-info-wrapper').style.display = 'block';
        });
        
    }
}
customElements.define('reward-offer-detail',RewardOfferDetail);


class RedemeedRewardOffer extends HTMLElement{
    constructor() {
        super();
        this.pageHeader = this.querySelector('.rewards-voucher-redeemed_inner');
        this.rewardInfo = this.querySelector('.rewards-voucher-redeemed_card_info');
        this.voucherImages = this.querySelectorAll('.rewards-voucher-redeemed_card_image');
        this.voucherDetail = this.querySelector('div.reward-redeem-voucher_detail');
        this.couponCode = this.querySelector('.rewards-voucher-redeemed-code');
        this.voucherTitleCount = this.querySelector('.reward-redeem-voucher-title-count');
        this.copyCode = this.querySelector('.rewards-voucher-redeemed-copy-code');
        this.voucherName = this.querySelectorAll('.voucher-name')
        this.backBtn = this.querySelector('.rewards-voucher-redeemed_back a');
        this.voucherID = urlParams.get('reward');
        this.user_id = document.querySelector('input[name="meta[user_id]"]').value;
        this.offerDetail;

        this.inital();
        this.evenetListener();
    }
    async inital() {

        // set back button
        this.backBtn.href = `/account?view=rewards-redeem-voucher&reward=${urlParams.get('reward')}`;

        rewardOfferDetail(this.voucherID).then(data => {

            this.offerDetail = data;
            this.redeemVoucher(this.voucherID, this.user_id);

            if(data.tier.toLowerCase() == 'green')
                this.pageHeader.style.background = `radial-gradient(circle, #00B140 0%, #007C2D 100%)`;
            else if(data.tier.toLowerCase() == 'platinum')
                this.pageHeader.style.background = `radial-gradient(circle, #8A8F95 0%, #6B6E71 100%)`;
            
        });
        

    }
    evenetListener(){
        this.copyCode.addEventListener('click', e => {
            e.preventDefault();
            this.copyTextToClipboard(-1);
        });
    }
    copyTextToClipboard(text) {
        navigator.clipboard.writeText(this.couponCode.textContent);
        this.copyCode.querySelector('span').innerText ="{{ 'customer.account.reward.copied_voucher' | t }}";
    }

    async redeemVoucher(voucherID, userID) {
        var myHeaders = new Headers();
        myHeaders.append("token", "123456");
        myHeaders.append("lancode", "en");
        myHeaders.append("Content-Type", "application/json");

        var raw = JSON.stringify({
            reward_id:voucherID,
            user_id:userID,
            coupon_code:this.offerDetail.coupon_code,
            points:this.offerDetail.points,
            data:this.offerDetail});
            
        var requestOptions = {
            method: 'POST',
            headers: myHeaders,
            body: raw,
            redirect: 'follow'
        };
        fetch("https://alainappuat.gdadmin.org/shopifyApiV2/redeemCtdReward", requestOptions)
        .then(response => response.json())
        .then(data=>{
            console.log('Redeemed',data);
            if(Object.keys(data.response).length < 1)
                this.rewardInfo.innerHTML = `<div class="rewards-voucher-redeemed_title_card">${this.offerDetail.name}</div><h6>${data.message}</h6>`;
            
            // set image
            this.voucherImages.forEach(image => {
                image.innerHTML = `<img src="${this.offerDetail.image}" alt="${this.offerDetail.name}" class="rewards-voucher-redeemed_image">`;
                image.alt = this.offerDetail.name;
            });

            // ser voucher name
            this.voucherName.forEach(name => {
                name.innerText = this.offerDetail.name;
            });

            // set coupon code
            this.couponCode.innerText = data.response.coupon_code;

            // set voucher detail
            if(this.offerDetail.tier.toLowerCase() == 'blue'){
                this.dropIcon = "{{ 'Blue_Tier.png' | file_url }}";
            }else if(this.offerDetail.tier.toLowerCase() == 'green'){
                this.dropIcon = "{{ 'Green_Tier.png' | file_url }}";
                // this.pageHeader.style.background = `radial-gradient(circle, #00B140 0%, #007C2D 100%)`;
            }else{
                this.dropIcon = "{{ 'Platinum_Tier.png' | file_url }}";
                // this.pageHeader.style.background = `radial-gradient(circle, #8A8F95 0%, #6B6E71 100%)`;
            }

            this.voucherTitleCount.innerHTML = `${this.offerDetail.description} {{ 'customer.account.reward.discount_code_voucher' | t }}<span class="count_drops_total">${this.offerDetail.points} <img src="${this.dropIcon}" width="15px">`;

            this.querySelector('.reward-voucher-redeemed_inner_wrapper').style.display = 'block';
        }).catch(error => {
            this.rewardInfo.innerHTML = `<div class="rewards-voucher-redeemed_title_card">We're facing technical issue.Please try again later.</h6>`;
            console.error('Redeemed Voucher Error fetching data:', error)
        });
    }
}
customElements.define('redemeed-reward-offer',RedemeedRewardOffer);


class DropHistory extends HTMLElement {
    constructor() {
        super();
        this.user_id = document.querySelector('[name="meta[user_id]"]');
        this.user_name = document.querySelector('[name="meta[name]"]');
        this.token = document.querySelector('[name="meta[token]"]');
        this.pageHeader = this.querySelector('.reward_history_inner');
        this.pageHeading = this.querySelector('.reward_history_inner_bottom');
        this.currentDrop = this.querySelector('.reward_history_inner_data_points_count');
        this.expireDrop = this.querySelector('.reward_history_data_drops_details.drop_expire');
        this.historyHTML = this.querySelector('.my_wallet_data_blocks_main');
        this.dropIcon = this.data = '';
        this.inital();
    }
    inital() {
        this.customerReward = getCustomerReward().then(data => {
            this.data = data;
            this.pageHeading.innerText = `${data.tier} {{ 'customer.account.reward.tier' | t }}`;

            if(data.tier.toLowerCase() == 'blue'){
                this.dropIcon = "{{ 'Blue_Tier.png' | file_url }}";
            }else if(data.tier.toLowerCase() == 'green'){
                this.dropIcon = "{{ 'Green_Tier.png' | file_url }}";
            }else{
                this.dropIcon = "{{ 'Platinum_Tier.png' | file_url }}";
            }

            if(data.current_points < 30){
                this.currentDrop.innerHTML = `<img src="{{ 'Blue_Tier.png' | file_url }}" alt="Drop" width="36"><span>${this.data.current_points}</span>`;
            }else if(data.current_points > 30 && data.current_points <= 80) {
                this.pageHeader.style.background = `radial-gradient(circle, #00B140 0%, #007C2D 100%)`;
                this.currentDrop.innerHTML = `<img src="{{ 'Green_Tier.png' | file_url }}" alt="Drop" width="36"><span>${data.current_points}</span>`;
                this.querySelector('.reward_history_data_title_main').style.color = this.querySelector('.reward_history_inner_data_points_count').style.color = "#007c2d";
            }else{
                this.pageHeader.style.background = `radial-gradient(circle, #8A8F95 0%, #6B6E71 100%)`;
                this.currentDrop.innerHTML = `<img src="{{ 'Platinum_Tier.png' | file_url }}" alt="Drop" width="36"><span>${data.current_points}</span>`;
                this.querySelector('.reward_history_data_title_main').style.color = this.querySelector('.reward_history_inner_data_points_count').style.color = "#6b6e71";
            }

            if(data.points_expiring != null){
                this.expireDate = new Date(this.data.next_date_points_expiring);
                this.expireDrop.innerHTML = `<strong>${data.points_expiring} {{ 'customer.account.reward.drop' | t }}</strong> {{ 'customer.account.reward.expire_label' | t }} ${this.expireDate.getDate()}/${this.expireDate.getMonth() + 1}/${this.expireDate.getFullYear()}`;
            }

            this.getDropHisory();
        });
    }
    getDropHisory(){
        fetch(`https://alainappuat.gdadmin.org/shopifyApiV2/getDropHistory/${this.user_id.value}/0`,{
            method:'GET',
            headers:{
                'lancode':'en',
                'token':'123456'
            }
        }).then(response => response.json())
        .then(data => {
            console.log('Drop History',data);
            const groupedHistory = this.groupedHistory(data.response);
            console.log("Year wise array",groupedHistory);

            let historyHTML = ``;
            let total_accumulated = 0;
            Object.keys(groupedHistory).forEach(year => {
                historyHTML += `<div class="table_purchase_history_year">Purchase History <b>${year}</b> </div>`;
                Object.keys(groupedHistory[year]).forEach(month => {

                    historyHTML += `<div class="my_wallet_data_blocks_inner">
                    <div class="wallet_debited_month">${this.getMonthName(month)}</div>`;
                    groupedHistory[year][month].forEach(item => {
                        let createdAt = new Date(item.date);
                        let image = (item.type == 'topup') ? "{{ 'wallet_icon.svg' | asset_url }}" : this.dropIcon;
                        let formatedMoney = item.amount;
                        historyHTML += `<div class="my_wallet_data_blocks">
                        <div class="my_wallet_data_blocks_icon">
                            <img src="${image}" class="${(item.type != 'topup') ? "spent-icon" : ''}"/>
                        </div>
                        <div class="my_wallet_transection_type">
                            <span class="data_first">${(item.type == 'topup') ? "{{ 'customer.account.reward.topup' | t }}" : " {{ 'customer.account.reward.spent' | t }} "}</span>
                            <span class="data_sec">${createdAt.getDate()} ${createdAt.toLocaleString('default', { month: 'long' })} ${createdAt.getFullYear()}</span>
                        </div>
                        <div class="my_wallet_bloks_price_main">
                            <span class="reward_history_bloks_drops_spend ${(item.type != 'topup') ? 'negative_value': '' }"> ${(item.type != 'topup') ? '- '+item.points : '+ '+item.points } {{ 'customer.account.reward.drop' | t }}</span>
                            <span class="my_wallet_bloks_price">${(item.type == 'topup') ? formatedMoney : item.name}</span>
                        </div>
                        </div>`;

                        if(item.type == 'topup')
                            total_accumulated += item.points;

                    });
                    historyHTML += `</div>`;

                });
            });

            // date ordinal
            const nth = (d) => {
                if (d > 3 && d < 21)
                    return d+'th';
                switch (d % 10) {
                  case 1:  
                    return d+"st";
                  case 2:  
                    return d+"nd";
                  case 3:  
                    return d+"rd";
                  default: 
                    return d+"th";
                }
            };
            const dates = data.response.map(item => new Date(item.date));
            const minDate = new Date(Math.min(...dates));
            const maxDate = new Date(Math.max(...dates));

            if(Array.isArray(data.response) && data.response.length > 0 ){
                this.querySelector('.reward_history_data_date_details').innerText = `From ${nth(minDate.getDate())} ${this.getMonthName(minDate.getMonth(), 'short')} ${minDate.getFullYear().toString().slice(-2)} to ${nth(maxDate.getDate())} ${this.getMonthName(maxDate.getMonth(), 'short')} ${maxDate.getFullYear().toString().slice(-2)}`;
            }

            this.querySelector('.reward_history_points_count.total_accumulated').innerText = total_accumulated;

            let memberDate = new Date(this.data.customer_sinced);
            historyHTML += `<div class="date_bottom_cards">{{ 'customer.account.reward.member_since' | t }} ${memberDate.getDate()} ${this.getMonthName(memberDate.getMonth())} ${memberDate.getFullYear()}</div>`;

            this.historyHTML.innerHTML = historyHTML;
        })
        .catch(error => console.error(`Get Drop history Fetch error : ${error}`));
    }
    groupedHistory(data) {
        const organizedData = {};

        // Grouping data by year
        data.forEach(item => {
            const year = item.date.substring(0, 4);
            const month = item.date.substring(5, 7);
            
            if (!organizedData[year]) {
                organizedData[year] = {};
            }

            
            if (!organizedData[year][month]) {
                organizedData[year][month] = [];
            }

            organizedData[year][month].push(item);
        });

        // Sorting months in descending order
        Object.keys(organizedData).forEach(year => {
            organizedData[year] = Object.fromEntries(
                Object.entries(organizedData[year]).sort((a, b) => b[0] - a[0])
            );
        });

        return organizedData;
    }
    getMonthName(monthNumber, length = 'long') {
        const date = new Date();
        date.setMonth(monthNumber - 1);
        
        return date.toLocaleString('en-US', { month: length });
    }
}
customElements.define('drop-history', DropHistory);


class RewardBenefit extends HTMLElement {
    constructor() {
        super();
        this.inital();
    }
    inital() {
        this.customerReward = getCustomerReward().then(data => {
            if(data.tier.toLowerCase() == 'blue'){
                this.querySelector('.reward-benefits-range-icons .blue_drops').style.opacity = '1';
            }else if(data.tier.toLowerCase() == 'green'){
                this.querySelector('.reward-benefits-range-icons .green_drops').style.opacity = '1';
            }else{
                this.querySelector('.reward-benefits-range-icons .premium_drops').style.opacity = '1';
            }


            let memberDate = new Date(data.customer_sinced);
            this.querySelector('.reward-benefits-date-bottom').innerText = `{{ 'customer.account.reward.member_since' | t }} ${memberDate.getDate()} ${memberDate.toLocaleString('default', { month: 'long' })} ${memberDate.getFullYear()}`;
        });
    }
}
customElements.define('reward-benefit', RewardBenefit);