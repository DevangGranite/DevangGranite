<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Map Popup</title>
</head>
<body>

<!-- Input field for entering the address -->
<input type="text" id="addressInput" placeholder="Enter address" onkeydown="handleEnterKey(event)" data-gtm-form-interact-field-id="0">

<!-- Button to show the address on the map -->
<button type="button" onclick="showMapForAddress()">Show on Map</button>

<!-- Map Popup Container -->
<div id="mapPopUp" style="display: none;">
    <!-- Map Container -->
    <div id="map" style="height: 300px;"></div>
    
    <!-- Location Text -->
    <p id="locationText"></p>

    <!-- Close Button -->
    <button onclick="closeMapPopup()">Close Map</button>
</div>

<!-- Google Maps API Script -->
<script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places&callback=initMap" async defer></script>

<script>
    let map;
    let markers = [];

    function showMapForAddress() {
        var address = document.getElementById('addressInput').value;

        if (address.trim() !== '') {
            // Call the function to update both input fields and the map based on the entered address
            updateLocationForAddress(address);

            // Open the map popup
            openMapPopup();
        } else {
            console.error('Please enter a valid address');
        }
    }

    function updateLocationForAddress(address) {
        // Update the input field
        document.getElementById('addressInput').value = address;

        var geocoder = new google.maps.Geocoder();
        geocoder.geocode({ 'address': address }, function (results, status) {
            if (status == 'OK' && results[0]) {
                var location = results[0].geometry.location;
                map.setCenter(location);
                updateLocation(location, address);

                // Optionally, you can close the map popup after updating the location
                // closeMapPopup();
            } else {
                console.error('Geocode was not successful for the following reason: ' + status);
            }
        });
    }

    function openMapPopup() {
        let otpPopupHtml = document.getElementsByTagName('html')[0];
        let popupElement = document.getElementById('mapPopUp');

        if (popupElement) {
            popupElement.style.display = 'block';
            otpPopupHtml.classList.add('popup-overlap');

            if (typeof initMap === 'function') {
                initMap();
                getCurrentPosition();
            } else {
                console.error("initMap function is not defined");
            }
        } else {
            console.error("Element with ID 'popup' not found");
        }
    }

    function closeMapPopup() {
        let otpPopupHtml = document.getElementsByTagName('html')[0];
        let popupElement = document.getElementById('mapPopUp');
        let locationTextElement = document.getElementById('locationText');

        if (popupElement) {
            otpPopupHtml.classList.remove('popup-overlap');
            popupElement.style.display = 'none';
            locationTextElement.innerText = '';
            clearMarkers();
        } else {
            console.error("Element with ID 'popup' not found");
        }
    }

    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 25.199514, lng: 55.277397 },
            zoom: 16,
            gestureHandling: 'greedy',
        });

        google.maps.event.addListener(map, 'click', function (event) {
            updateLocation(event.latLng);
        });

        google.maps.event.addListener(map, 'drag', function () {
            updateLocation(map.getCenter());
        });

        google.maps.event.addListener(map, 'dragend', function () {
            updateLocation(map.getCenter());
        });
    }

    function getCurrentPosition() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(successCallback, errorCallback, {
                maximumAge: 60000,
                enableHighAccuracy: true
            });
        } else {
            console.error('Geolocation is not supported by this browser');
        }
    }

    function successCallback(position) {
        const currentLocation = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
        };
        map.setCenter(currentLocation);
        updateLocation(currentLocation);
    }

    function errorCallback(error) {
        console.error('Error getting current position:', error);
    }

    function updateLocation(location, address) {
        const latLng = location instanceof google.maps.LatLng ? location : new google.maps.LatLng(location.lat, location.lng);

        let apiAdd = `https://maps.googleapis.com/maps/api/geocode/json?key=YOUR_API_KEY&latlng=${latLng.lat().toFixed(6)},${latLng.lng().toFixed(6)}`;

        fetch(apiAdd)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.status === 'OK' && data.results && data.results.length > 0 && data.results[0].formatted_address) {
                    document.getElementById('locationText').innerText = data.results[0].formatted_address;
                    clearMarkers();
                    createMarker(latLng, data.results[0].formatted_address);
                } else {
                    console.error('Geocoding data is incomplete or returned an error:', data);
                    document.getElementById('locationText').innerText = 'Location information not available';
                }
            })
            .catch(error => {
                console.error('Error fetching data:', error);
                document.getElementById('locationText').innerText = 'Error fetching location information';
            });
    }

    function createMarker(location, address) {
        const marker = new google.maps.Marker({
            position: location,
            map: map,
            title: address,
            draggable: true
