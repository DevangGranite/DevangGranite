<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAEbeab1tjvjCM0g95bVgRTI1iR5yPln1Q&libraries=places"></script>
{{ 'map.css' | asset_url | stylesheet_tag }}

<!-- Popup content -->
<div id="mapPopUp">
  <!-- Input field for address -->
  <label for="addressInput">Address</label>
  <div class="address_Input">
  <input type="text" id="addressInput" placeholder="Enter address" onkeydown="handleEnterKey(event)">
    <div class="address_button">
  <button class="clear-button" onclick="clearAddressInput()"><img src="https://cdn.shopify.com/s/files/1/0678/1026/3276/files/clear.png?v=1709713777"></button>

    <!-- Button to show map based on address -->
  <button type="button" class="clear-button2" onclick="showMapForAddress()">
   <img src="https://cdn.shopify.com/s/files/1/0678/1026/3276/files/Component_2.png?v=1709716243">
  </button>
    </div>
  </div>

  <!-- Container for the map -->
  <div id="map"></div>

  <!-- Display selected location as text -->
  <div id="locationText"></div>

   <!-- confirm button -->
  <button type="button" class="confirm-icon" onclick="closeMapPopup()">
    Confirm Address
  </button>

  <!-- Close button -->
  <button type="button" class="close-icon" onclick="closeMapPopup()">{% render 'svg-icons' with 'map-close' %}</button>
</div>

<script>
    let map;
    let markers = [];

    function openMapPopup() {
        let address = document.getElementById('locationInput').value;
        let address1 = document.getElementById('addressInput').value;
      
        if (address.trim() !== '') {
            document.getElementById('locationInput').value = address;
            updateLocationForAddress();
        } else {
            console.error('Please enter a valid address');
        }
        
         if (address1.trim() !== '') {
            document.getElementById('addressInput').value = address1;            
            updateLocationForAddress1();
        } else {
            console.error('Please enter a valid address');
        }

        let otpPopupHtml = document.getElementsByTagName('html')[0];
        let popupElement = document.getElementById('mapPopUp');

        if (popupElement) {
            popupElement.style.display = 'block';
            otpPopupHtml.classList.add('popup-overlap');

            if (typeof initMap === 'function') {
                initMap();
                getCurrentPosition();
            } else {
                console.error("initMap function is not defined");
            }
        } else {
            console.error("Element with ID 'popup' not found");
        }
    }


    function closeMapPopup() {
        let otpPopupHtml = document.getElementsByTagName('html')[0];
        let popupElement = document.getElementById('mapPopUp');
        let locationTextElement = document.getElementById('locationText');

        if (popupElement) {
            otpPopupHtml.classList.remove('popup-overlap');
            popupElement.style.display = 'none';
            locationTextElement.innerText = '';
            clearMarkers();
        } else {
            console.error("Element with ID 'popup' not found");
        }
    }

    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 25.199514, lng: 55.277397 },
            zoom: 19,
            gestureHandling: 'greedy',
        });

        google.maps.event.addListener(map, 'click', function (event) {
            updateLocation(event.latLng);
        });

        google.maps.event.addListener(map, 'drag', function () {
            updateLocation(map.getCenter());
        });

        google.maps.event.addListener(map, 'dragend', function () {
            updateLocation(map.getCenter());
        });
    }

    function getCurrentPosition() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(successCallback, errorCallback, {
                maximumAge: 60000,
                enableHighAccuracy: true
            });
        } else {
            console.error('Geolocation is not supported by this browser');
        }
    }
  
    function successCallback(position) {
        const currentLocation = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
        };
        map.setCenter(currentLocation);
        updateLocation(currentLocation);
    }

    function errorCallback(error) {
        console.error('Error getting current position:', error);
    }

    function updateLocation(location) {
        const latLng = location instanceof google.maps.LatLng ? location : new google.maps.LatLng(location.lat, location.lng);

        let apiAdd = `https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyAEbeab1tjvjCM0g95bVgRTI1iR5yPln1Q&latlng=${latLng.lat().toFixed(6)},${latLng.lng().toFixed(6)}`;

        fetch(apiAdd)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.status === 'OK' && data.results && data.results.length > 0 && data.results[0].formatted_address) {
                    document.querySelector('input[name="lat"]').value = latLng.lat();
                    document.querySelector('input[name="lang"]').value = latLng.lng();
                    document.getElementById('locationText').innerText = data.results[0].formatted_address;
                    document.getElementById('locationInput').value = data.results[0].formatted_address;
                    clearMarkers();
                    createMarker(latLng, data.results[0].formatted_address);
                } else {
                    console.error('Geocoding data is incomplete or returned an error:', data);
                }
            })
            .catch(error => {
                console.error('Error fetching data:', error);
            });
    }

    function createMarker(location, address) {
      const fixedPosition = map.getCenter();
        const marker = new google.maps.Marker({
            position: location,
            map: map,
            title: address,
            draggable: false
        });

        const infoWindow = new google.maps.InfoWindow({
            content: `<div><strong>${address}</strong></div>`
        });

        marker.addListener('click', function () {
            infoWindow.open(map, marker);
        });

        google.maps.event.addListener(marker, 'dragend', function () {
            updateLocation(marker.getPosition());
        });

        markers.push(marker);
    }

    function clearMarkers() {
        for (const marker of markers) {
            marker.setMap(null);
        }
        markers = [];
    }

    function handleEnterKey(event) {
        if (event.key === 'Enter') {
            event.preventDefault();
            updateLocationForAddress();
        }
    }

    function updateLocationForAddress() {
        var address = document.getElementById('locationInput').value;
        var geocoder = new google.maps.Geocoder();
        geocoder.geocode({ 'address': address }, function (results, status) {
            if (status == 'OK' && results[0]) {
                var location = results[0].geometry.location;
                map.setCenter(location);
                updateLocation(location);
            }
        });
    }

    function updateLocationForAddress1() {
        var address = document.getElementById('addressInput').value;
        var geocoder = new google.maps.Geocoder();
        geocoder.geocode({ 'address': address }, function (results, status) {
            if (status == 'OK' && results[0]) {
                var location = results[0].geometry.location;
                map.setCenter(location);
                updateLocation(location);
            }
        });
    }

    function showMapForAddress() {
        openMapPopup();
        updateLocationForAddress1();
        updateLocationForAddress();
      
        setTimeout(() => {
        updateLocationForAddress1();
        openMapPopup();
        }, 500); // You can adjust the delay as needed
    }
    function clearAddressInput() {
        document.getElementById('addressInput').value = '';
    }
</script>
